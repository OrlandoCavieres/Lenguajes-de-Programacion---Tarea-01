#lang play
(require "base.rkt")

(printf "\n---------- Test (lookupT-env) ----------\n\n")
(test/exn (lookupT-env 'z (anTEnv 'x (TVar 2) (mtTEnv))) "Exception: Identificador libre = z")
(reset)
(test (lookupT-env 'x (anTEnv 'x (TVar 1) (mtTEnv))) (TVar 1))
(reset)
(test/exn (lookupT-env 't (mtTEnv)) "Exception: Identificador libre = t")
(reset)
(test (lookupT-env 'e (anTEnv 'q (TVar 1) (anTEnv 'w (TVar 2) (anTEnv 'e (TVar 3) (anTEnv 'r (TVar 4) (mtTEnv)))))) (TVar 3))
(reset)
(test (lookupT-env '(fun (num 2) (num 3)) (anTEnv 'c (TVar 1) (anTEnv '(fun (num 2) (num 3)) (TVar 4) (anTEnv 'f (TVar 7) (mtTEnv))))) (TVar 4))
(reset)

(printf "\n---------- Test (typeof) ----------\n\n")

(printf "*** Ejemplos Enunciado e iniciales ***\n\n")
(test (typeof (num 3) (mtTEnv)) (list (TNum)))
(test (typeof (parse '{+ {+ {- 6 5} 4} 6})(mtTEnv)) 
    (list (TNum) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum))))
(test (typeof (parse '{+ 10 12}) (mtTEnv)) (list (TNum) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum))))
(test (typeof (add (num 10) (num 3)) (mtTEnv)) (list (TNum) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum))))
(test (typeof (parse 'x)(anTEnv 'x (TNum) (mtTEnv))) (list (TNum)))
(reset)
(test (typeof (parse '{- 10 x}) (anTEnv 'x (TVar 1) (mtTEnv))) (list (TNum) (Cnst (TNum) (TNum)) (Cnst (TVar 1) (TNum))))
(reset)
(test/exn (typeof (fun 'x (id 'y)) (mtTEnv)) "Exception: Identificador libre = y")
(reset)
(test (typeof (fun 'x (add (id 'x) (num 1))) (mtTEnv))(list (TFun (TVar 1) (TNum)) (Cnst (TVar 1) (TNum)) (Cnst (TNum) (TNum))))
(reset)
(test (typeof (add (num 4) (app (fun 'x (add (id 'x) (num 5))) (num 10))) (mtTEnv)) 
    (list (TNum) (Cnst (TVar 1) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TFun (TVar 1) (TNum)) (TFun (TNum) (TVar 2))) (Cnst (TNum) (TNum)) (Cnst (TVar 4) (TNum))))
(reset)
(test (typeof (app (fun 'x (app (fun 'y (app (fun 'z (add (add (id 'x) (id 'y)) (id 'z))) (num 3))) (num 10))) (num 5)) (mtTEnv)) (list
 (TVar 6)
 (Cnst (TVar 1) (TNum))
 (Cnst (TVar 2) (TNum))
 (Cnst (TNum) (TNum))
 (Cnst (TVar 3) (TNum))
 (Cnst (TFun (TVar 3) (TNum)) (TFun (TNum) (TVar 4)))
 (Cnst (TFun (TVar 2) (TVar 4)) (TFun (TNum) (TVar 5)))
 (Cnst (TFun (TVar 1) (TVar 5)) (TFun (TNum) (TVar 6)))))
(reset)
(test (typeof (app (fun 'x (id 'x)) (num 3)) (mtTEnv)) (list (TVar 2) (Cnst (TFun (TVar 1) (TVar 1)) (TFun (TNum) (TVar 2)))))
(reset)
(test/exn (typeof (id 'x) (mtTEnv)) "Exception: Identificador libre = x")
(reset)
(test (typeof (if0 (num 2) (num 5) (num 3)) (mtTEnv)) (list (TNum) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum))))
(reset)

(printf "*** Test Propios ***\n\n")
(test (typeof (parse 300) (mtTEnv)) (list (TNum)))
(test (typeof (fun 'x (if0 (num 1) (add (num 4) (sub (num 2) (id 'x))) (if0 (num 1) (num 6) (num 12)))) (mtTEnv)) 
    (list (TFun (TVar 1) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TVar 1) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum))))
(reset)
(test (typeof (add (sub (num 1000) (id 'z)) (add (num 100) (num 50))) (anTEnv 'z (TVar 1) (mtTEnv))) 
    (list (TNum) (Cnst (TNum) (TNum)) (Cnst (TVar 1) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum))))
(reset)
(test (typeof (app (fun 'r (fun 'k (add (if0 (num 3) (id 'k) (id 'r)) (id 'k)))) (num 7)) (anTEnv 'k (TVar 1) (mtTEnv)))
    (list (TVar 3) (Cnst (TNum) (TNum)) (Cnst (TVar 2) (TVar 1)) (Cnst (TVar 2) (TNum)) (Cnst (TVar 2) (TNum)) (Cnst (TFun (TVar 1) (TFun (TVar 2) (TNum))) (TFun (TNum) (TVar 3)))))
(reset)

(printf "---------- Test (substitute) ----------\n\n")

(test (substitute (TVar 4) (TNum) '()) '())
(test (substitute (TVar 1) (TNum) (list (Cnst (TNum) (TNum)) (Cnst (TVar 1) (TNum)))) (list (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum))))
(test (substitute (TVar 5) (TNum) (list (Cnst (TFun (TVar 1) (TFun (TVar 5) (TVar 3))) (TFun (TVar 1) (TNum))))) 
    (list (Cnst (TFun (TVar 1) (TFun (TNum) (TVar 3))) (TFun (TVar 1) (TNum)))))
(test (substitute (TVar 1) (TNum) (list (Cnst (TFun (TVar 1) (TVar 1)) (TFun (TNum) (TVar 2))))) (list (Cnst (TFun (TNum) (TNum)) (TFun (TNum) (TVar 2)))))
(test (substitute (TVar 4) (TVar 1) (list (Cnst (TVar 4) (TVar 2)) (Cnst (TVar 1) (TVar 2)) (Cnst (TVar 4) (TVar 1)) (Cnst (TNum) (TVar 4)))) 
    (list (Cnst (TVar 1) (TVar 2)) (Cnst (TVar 1) (TVar 2)) (Cnst (TVar 1) (TVar 1)) (Cnst (TNum) (TVar 1))))
(test (substitute (TVar 1) (TVar 2) (list (Cnst (TFun (TVar 1) (TVar 4)) (TFun (TVar 1) (TVar 3))) (Cnst (TVar 2) (TNum)))) 
    (list (Cnst (TFun (TVar 2) (TVar 4)) (TFun (TVar 2) (TVar 3))) (Cnst (TVar 2) (TNum))))

(printf "---------- Test (unify) ----------\n\n")

(test (unify '()) '())
(test (unify (list (Cnst (TVar 2) (TNum)) (Cnst (TNum) (TVar 2)))) (list (Cnst (TVar 2) (TNum))))
(test (unify (list (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TNum) (TNum)))) '())
(test (unify (list (Cnst (TVar 2) (TFun (TNum) (TVar 3))) (Cnst (TFun (TVar 1) (TVar 4)) (TVar 2))))
      (list (Cnst (TVar 4) (TVar 3)) (Cnst (TVar 1) (TNum)) (Cnst (TVar 2) (TFun (TNum) (TVar 3)))))
(test/exn (unify (list (Cnst (TVar 4) (TNum)) (Cnst (TVar 3) (TFun (TVar 5) (TVar 3)))))
      "Exception: Error de Tipo: No se puede unificar [(TVar 3)] con [(TFun (TVar 5) (TVar 3))]")
(test (unify (list (Cnst (TVar 3) (TNum)) (Cnst (TNum) (TNum)) (Cnst (TFun (TVar 1) (TVar 1)) (TFun (TFun (TVar 3) (TNum)) (TVar 2))) (Cnst (TVar 2) (TFun (TNum) (TVar 4)))))
    (list (Cnst (TVar 4) (TNum)) (Cnst (TVar 1) (TFun (TNum) (TNum))) (Cnst (TVar 2) (TFun (TNum) (TVar 4))) (Cnst (TVar 3) (TNum))))

(printf "---------- Test (lookup-list) ----------\n\n")

(test (lookup-list '() (TNum)) (TNum))
(test (lookup-list (list (Cnst (TNum) (TNum))) (TNum)) (TNum))
(test (lookup-list (list (Cnst (TVar 1) (TNum)) (Cnst (TVar 2) (TNum)) (Cnst (TNum) (TNum))) (TVar 2)) (TNum))
(test (lookup-list (list (Cnst (TVar 1) (TVar 2)) (Cnst (TVar 1) (TNum))) (TVar 1)) (TVar 2))
(test (lookup-list (list (Cnst (TVar 1) (TFun (TNum) (TVar 2))) (Cnst (TVar 2) (TNum))) (TVar 1)) (TFun (TNum) (TNum)))

(printf "---------- Test (runType) ----------\n\n")

(printf "***Ejemplos Enunciado***\n\n")
(test (runType '(fun (x) (+ x 1))) (TFun (TNum) (TNum)))
(reset)
(test (runType '(fun (x) x)) (TFun (TVar 1) (TVar 1)))
(reset)
(test (runType '(fun (x) 3)) (TFun (TVar 1) (TNum)))
(reset)
(test/exn (runType 'x) "Exception: Identificador libre = x")
(reset)
(test/exn (runType '((fun (x) (+ x 1)) (fun (x) x)))
          "Exception: Error de Tipo: No se puede unificar [num] con [(TFun (TVar 2) (TVar 2))]")

(printf "***Tests Adicionales***\n\n")
(test (runType '{- 3 {- {+ 50 {- 4 2}} 6}}) (TNum))
(test (runType '{with {y 20} {- 40 y}}) (TNum))
(reset)
(test/exn (runType '(with (x (+ 10 5)) (fun (y) (+ x (+ y z))))) "Exception: Identificador libre = z")
(reset)
(test (runType '((fun (x) (- 100 (+ x 25))) ((fun (t) (+ t t)) ((fun (y) (- (+ 7 5) y)) 2)))) (TNum))
(reset)
(test (runType '(fun (x) (if0 x (+ x 1)(- x 1)))) (TFun (TNum) (TNum)))
(reset)
